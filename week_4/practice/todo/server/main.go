package main

import (
	"context"
	"flag"
	"fmt"
	"github.com/go-pg/pg"
	"github.com/golang/glog"
	grpc_runtime "github.com/grpc-ecosystem/grpc-gateway/runtime"
	"grabvn-golang-bootcamp/week_4/practice/todo/server/respository"
	"grabvn-golang-bootcamp/week_4/practice/todo/server/service"

	"grabvn-golang-bootcamp/week_4/practice/todo/protobuf"

	"google.golang.org/grpc"

	"net"
	"net/http"
	"time"
)

var (
	// command-line options:
	// gRPC server endpoint
	grpcServerEndpoint = flag.String("grpc-server-endpoint", "localhost:9090", "gRPC server endpoint")
)

func run() error {
	grpcAddress := "localhost:5001"
	httpAddress := "localhost:5002"

	fmt.Printf("Connecting into DB\n")
	// Connect to PostgresQL
	db := pg.Connect(&pg.Options{
		User:                  "postgres",
		Password:              "example",
		Database:              "todo",
		Addr:                  "localhost" + ":" + "5433",
		RetryStatementTimeout: true,
		MaxRetries:            4,
		MinRetryBackoff:       250 * time.Millisecond,
	})
	// Create Table from Todo struct generated by gRPC
	_ = db.CreateTable(&protobuf.Todo{}, nil)



	s := grpc.NewServer()
	todoRepo := respository.TodoDAO{DB: db}
	protobuf.RegisterTodoServiceServer(s, service.TodoService{TodoDao:todoRepo})

	lis, err := net.Listen("tcp", grpcAddress)
	if err != nil {
		return fmt.Errorf("can not listen tcp grpcAddress %s: %v", grpcAddress, err)
	}

	fmt.Printf("Serving GRPC at %s.\n", grpcAddress)
	go s.Serve(lis)

	conn, err := grpc.Dial(grpcAddress, grpc.WithInsecure())
	if err != nil {
		panic("Couldn't contact grpc server")
	}

	mux := grpc_runtime.NewServeMux()
	err = protobuf.RegisterTodoServiceHandler(context.Background(), mux, conn)
	if err != nil {
		panic("Cannot serve http api")
	}
	fmt.Printf("Serving http at %s.\n", httpAddress)
	http.ListenAndServe(httpAddress, mux)
	return nil
}

func main() {
	flag.Parse()
	defer glog.Flush()

	if err := run(); err != nil {
		glog.Fatal(err)
	}
}
